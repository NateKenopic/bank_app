from account import BankAccount
import random
import curses

while True:
	print("================================================================")
	print("============= Welcome To Nate's Python Banking App =============")
	print("================================================================")

	print("0. Exit")
	print("1. See Account Balance")
	print("2. Make Deposit")
	print("3. Make Withdrawal")
	print("4. Make an Investment")
	print("5. See your Investment")

	print("")

	id = random.randint(000000000, 999999999)

	ba = BankAccount(id, 0)

	response = input("Pick number: ")

	respone_in_integer = int(response)

	if respone_in_integer == 0:
		print("exiting")
		exit()
	elif respone_in_integer == 1:
		print("")
		result = f"=== Account # {ba.id} ==="
		print("===========================")
		print(result)
		print(f"Current Balance: ${ba.balance}")
		print("")
	elif respone_in_integer == 2:
		print("make deposit")
	elif respone_in_integer == 3:
		print("make withdrawal")
	elif respone_in_integer == 4:
		invested_company = ''
		invested_amount = 0

		window = curses.initscr() # Initialize the library. Returns a WindowObject which represents the whole screen.
		window.keypad(True) # Escape sequences generated by some keys (keypad, function keys) will be interpreted by curses.
		curses.cbreak() # Keys are read one by one. Also safer than curses.raw() because you can still interrupt a running script with hotkeys.
		curses.noecho() # Prevent getch() keys from being visible when pressed. Echoing of input characters is turned off.

		# Initialize colors.
		curses.start_color() # Must be called if the programmer wants to use colors.
		curses.init_pair(1, curses.COLOR_BLACK, curses.COLOR_WHITE)
		curses.init_pair(2, curses.COLOR_WHITE, curses.COLOR_BLACK)
		black = curses.color_pair(1)
		white = curses.color_pair(2)

		def display_menu(window):
		    selectedIndex = 0

		    while True:
		        window.clear()
		        window.addstr('Pick a Company to Invest in:\n', curses.A_UNDERLINE)

		        for i in range(len(MENU_OPTIONS)):
		            # Uncolored line number.
		            window.addstr('{}. '.format(i + 1))
		            # Colored menu option.
		            window.addstr(MENU_OPTIONS[i] + '\n', black if i == selectedIndex else white)

		        c = window.getch()

		        if c == curses.KEY_UP or c == curses.KEY_LEFT:
		            # Loop around backwards.
		            selectedIndex = (selectedIndex - 1 + len(MENU_OPTIONS)) % len(MENU_OPTIONS)

		        elif c == curses.KEY_DOWN or c == curses.KEY_RIGHT:
		            # Loop around forwards.
		            selectedIndex = (selectedIndex + 1) % len(MENU_OPTIONS)

		        # If curses.nonl() is called, Enter key = \r else \n.
		        elif c == curses.KEY_ENTER or chr(c) in '\r\n':
		            # If the last option, exit, is selected.
		            if selectedIndex == len(MENU_OPTIONS) - 1:
		                curses.endwin() # De-initialize the library, and return terminal to normal status.    <-- Works without this on Windows, however in Linux you can't type in the terminal after exiting without this :P
		                break

		            invested_company = MENU_OPTIONS[selectedIndex]
		            curses.endwin()
		            break
		        else:
		            window.addstr("\nThe pressed key '{}' {} is not a valid input.\n".format(chr(c), c))
		            window.getch()

		MENU_OPTIONS = [
		    'Apple',
		    'Intel',
		    'IBM',
		    'Microsoft',
		    'Amazon',
		    'Samsung',
		    'Dell',
		    'Exit',
		]

		if __name__ == '__main__':
		    display_menu(window)

		print("")
		print(f"You chose the Company: {invested_company}")
		to_invest = input("Amount to Invest: $")
		to_invest_in_int = int(to_invest)

		ba.invest(invested_company, to_invest_in_int)
	elif respone_in_integer == 5:
		print("")
		result = f"=== Account # {ba.id} ==="
		print("===========================")
		print(result)
		print("")
		if len(ba.investments) == 0:
			print("no investments")
		else:
			print(f"Investments: {ba.investments[0]}")

		print("")
	else:
		print("invalid input")